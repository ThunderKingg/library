OO设计原则
第一个设计原则：封装变化，找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起。

第二个设计原则：针对接口编程，而不是针对实现。

第三个设计原则：多用组合，少用继承。

第四个设计原则：为了交互对象之间的松耦合设计而努力。

OO设计模式

策略模式：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

观察者模式：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。

java内置的可观察者java.util.Observable的一些问题：
可观察者是一个类而不是一个接口，java.util.Observable的实现有许多问题，限制了它的使用和复用。
因为java.util.Observable是一个类，你必须设计一个类继承它。如果某类想同时具有Observable类和另一个超类的行为，就会陷入两难。
Obervable将关键方法保护起来了，这意味着：除非你继承自Observable，否则你无法创建Observable实例组合到你自己的对象中。
使用时根据具体的业务决定使用Obervable还是创建自己的可观察者接口。