编写一段计算机程序一般都是实现一种已有的方法来解决某个问题。这种方法大多和使用的编程语言无关---它适用于各种计算机以及编程语言。
是这种方法而非计算机本身描述了解决问题的步骤。
在计算机科学领域，我们用算法这个词来描述一种有限、确定、有效的并适合用计算机程序来实现的解决问题的方法。
算法是计算机科学的基础，是这个领域研究的核心。

背包(bag)
	背包是一种不支持从中删除元素的集合数据类型--它的目的就是帮助用例收集元素并迭代遍历所有收集到的元素（用例也可以检查背包是否为空或者获取背包中元素的数量）。
	迭代的顺序不确定且与用例无关。
链表
	链表是一种递归的数据结构，它或者为空(null)，或者是指向一个节点(node)的引用，该节点含有一个泛型的元素和一个指向另一条链表的引用。
优先队列
	优先队列应该支持两种操作：删除最大元素和插入元素。
	优先队列的使用和队列（删除最老的元素）以及栈（删除最新的元素）类似。
	数据结构二叉堆能够很好地实现优先队列的基本操作
定义：当一颗二叉树的每个节点都大于等于它的两个子节点时，它被称为堆有序。

完全二叉树只用数组而不需要指针就可以表示。具体方法就是将二叉树的节点按照层级顺序放入数组中
定义：二叉堆是一组能够用堆有序的完全二叉树排序的元素，并在数组中按层级储存（不使用数组的第一个位置）。

简单起见，在下文中我们将二叉堆简称为堆：在一个堆中，位置k的节点的父节点的位置为k/2,而它的两个子节点的位置则分别为2k和2k+1.
这样在不使用指针的情况下可以通过计算数组的索引在树中上下移动：从a[k]向上一层就k=k/2;向下一层则k=2k或2k+1;

基础数据结构
	数据结构				优点								缺点
	    数组		通过索引可以直接访问任意元素		在初始化时就需要知道元素的数量
	    链表		使用的空间大小和元素数量成正比		需要通过引用访问任意元素
	    
选择排序
	首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。
再次，在剩下的元素中找到最小的元素，将它与数组中的第二个元素交换位置。如此往复，直到将整个数组排序。这种方法叫做选择排序，因为它在不断地选择剩余元素中最小者。
对于长度为N的数组,选择排序大约需要N的2次方/2次比较和N次交换。

选择排序有两个很鲜明的特点。
1：运行时间和输入无关。为了找出最小的元素而扫描一遍数组并不能为下一遍扫描提供什么信息。这种性质在某些情况下是缺点。
因为使用选择排序会发现，一个已经有序的数组或是主键全部相等的数组和一个元素随机排列的数组所用的排序时间竟然一样长。

2：数据移动是最少的。每次交换都会改变两个数组元素的值，因此选择排序用了N次交换--交换次数和数组的大小是线性关系。

插入排序
	在计算机实现中，为了给要插入的元素腾出空间，我们需要将其余所有元素在插入之前都向右移动一位。这种算法叫做插入排序。
	与选择排序一样，当前索引左边的所有元素都是有序的，但它们的最终位置还不确定，为了给更小的元素腾出空间，它们可能会被移动。
但是当元素索引到达数组右端时，数组排序就完成了。
	和选择排序不同的是，插入排序所需的时间取决于输入中元素的初始顺序。例如，对一个很大且其中的元素已经有序（或接近有序）的数组
进行排序将会比对随机顺序的数组或者逆序数组进行排序要快得多。
	对于0到N-1之间的每个i，将a[i]与a[0]到a[i-1]中比它小的所有元素一次有序地进行交换。在索引i由左向右变化的过程中，它左侧的元素
总是有序的，所以当i到达数组的右端时排序就完成了。

希尔排序
	希尔排序的思想是使数组中任意间隔为h的元素都是有序的。这样的数组被称为h有序数组。换句话说，一个h有序数组就是h个互相独立的有序
数组编织在一起组成的一个数组。在进行排序时，如果h很大，我们就能将元素移动到很远的地方，为实现更小的h有序创造方便。用这种方式，对于
任意以1结尾的h序列，我们都能够将数组排序。这就是希尔排序。













